
package service.api;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Logger;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.3-b02-
 * Generated source version: 2.1
 * 
 */
@WebServiceClient(name = "AlumnoServiceService", targetNamespace = "http://api.service/", wsdlLocation = "file:/D:/Tesis/guarani/trunk/tesis-last/clienteWebService/src/wsdl/AlumnoService.wsdl")
public class AlumnoServiceService
    extends Service
{

    private final static URL ALUMNOSERVICESERVICE_WSDL_LOCATION;
    private final static Logger logger = Logger.getLogger(service.api.AlumnoServiceService.class.getName());

    static {
        URL url = null;
        try {
            URL baseUrl;
            baseUrl = service.api.AlumnoServiceService.class.getResource(".");
            url = new URL(baseUrl, "file:/D:/Tesis/guarani/trunk/tesis-last/clienteWebService/src/wsdl/AlumnoService.wsdl");
        } catch (MalformedURLException e) {
            logger.warning("Failed to create URL for the wsdl Location: 'file:/D:/Tesis/guarani/trunk/tesis-last/clienteWebService/src/wsdl/AlumnoService.wsdl', retrying as a local file");
            logger.warning(e.getMessage());
        }
        ALUMNOSERVICESERVICE_WSDL_LOCATION = url;
    }

    public AlumnoServiceService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public AlumnoServiceService() {
        super(ALUMNOSERVICESERVICE_WSDL_LOCATION, new QName("http://api.service/", "AlumnoServiceService"));
    }

    /**
     * 
     * @return
     *     returns AlumnoService
     */
    @WebEndpoint(name = "AlumnoServicePort")
    public AlumnoService getAlumnoServicePort() {
        return super.getPort(new QName("http://api.service/", "AlumnoServicePort"), AlumnoService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns AlumnoService
     */
    @WebEndpoint(name = "AlumnoServicePort")
    public AlumnoService getAlumnoServicePort(WebServiceFeature... features) {
        return super.getPort(new QName("http://api.service/", "AlumnoServicePort"), AlumnoService.class, features);
    }

}
